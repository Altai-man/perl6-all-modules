#!/usr/bin/env perl6
# originally based on an old perl5 script "ptags" by tchrist@perl.com
# heavily tweaked and ported to perl6 by steve.mynott@gmail.com

use v6;
use File::Find;

my (@tags, $fullpack);

# package
constant ptagfield = ';"	p';

# subroutine
constant stagfield = ';"	s';

grammar Purl6 {
    
    regex fullpack { ((\w|'::')*) }

    token TOP {
        ^ <packages> | <subroutines> $
    }

    token packages {
        \s* (role|unit\s+class|unit\s+module|module|package|class) \s+ <fullpack>
    }

    token subroutines {
        \s* (multi\s+sub|submethod|sub|multi\s+method|method) \s+ ( \w+ '::')* (\!*(\w|\-)+)
    }

}

class Purl6::Actions {

    has $.file;

    method packages($/ is copy) {

        $fullpack =  $<fullpack>.Str;

        my $rest = $<>;
        $rest ~~ s:g/\-/\\-/; 

        if $fullpack {
            take "{$fullpack}\t{$.file}\t/$rest/{ptagfield}";
        }
    }

    method subroutines($/ is copy) {

        my $func = $/[2].Str;

        my $rest = $<>;
        $rest ~~ s:g/\-/\\-/;

        my $line = "$func\t{$.file}\t/^$rest/{stagfield}";

        if $fullpack {
            take "{$fullpack}::$func\t{$.file}\t/^$rest/{stagfield}";
        }

        take $line;

    }
}

my @files = find( :dir("."), :type('file'), :name( rx/(.p(m|l|6)|pm6 )$/) ).map({.IO});

for @files.sort -> $io {

    my $file = $io.relative;
    my $lines = slurp $file;
    my @lines = $lines.split(/\n/);

    for @lines -> $line {
        $line.chomp;
        next unless $line;

        @tags.push: gather Purl6.parse( $line, :actions( Purl6::Actions.new(:$file) ) )  ;

    }  
}

@tags = @tags.unique.sort;

spurt("tags", @tags.join("\n"));
