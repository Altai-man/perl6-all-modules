=begin pod

=TITLE Cool

=SUBTITLE Value that can be treated as a string or number interchangeably

    class Cool is Any { }

C<Cool>, also known as the B<C>onvenient B<OO> B<L>oop, is a base class
for strings, numbers and other built-in classes that you are supposed to use
mostly interchangeably.

Methods in C<Cool> coerce the invocant to a more
specific type, and then call the same method on that type. For example both
L<Int> and L<Str> inherit from C<Cool>, and calling method C<substr> on an
C<Int> converts the integer to C<Str> first.

    123.substr(1, 1);   # '2', same as 123.Str.substr(1, 1)

The following built-in types inherit from C<Cool>:
L<Array> L<Backtrace> L<Bag> L<Baggy> L<Bool> L<Complex> L<Cool>
L<Duration> L<Enumeration> L<EnumMap> L<FatRat> L<Hash> L<Instant>
L<Int> L<Iterable> L<Iterator> L<KeyHash> L<KeySet> L<List>
L<ListIter> L<LoL> L<MapIter> L<Nil> L<Num> L<Numeric> L<Parcel>
L<Range> L<Real> L<Seq> L<Set> L<Stash> L<Str> L<Stringy>

The following table summarizes the methods that C<Cool> provides, and
what type they coerce to:

=begin table

    method          coercion type

    abs             Numeric
    conj            Numeric
    sqrt            Numeric
    sign            Real
    rand            Numeric
    sin             Numeric
    asin            Numeric
    cos             Numeric
    acos            Numeric
    tan             Numeric
    atan            Numeric
    atan2           Numeric
    sec             Numeric
    asec            Numeric
    cosec           Numeric
    acosec          Numeric
    cotan           Numeric
    acotan          Numeric
    sinh            Numeric
    asinh           Numeric
    cosh            Numeric
    acosh           Numeric
    sech            Numeric
    asech           Numeric
    asech           Numeric
    cosech          Numeric
    acotanh         Numeric
    cis             Numeric
    log             Numeric
    exp             Numeric
    roots           Numeric
    log10           Numeric
    unpolar         Numeric
    round           Numeric
    floor           Numeric
    ceiling         Numeric
    truncate        Numeric
    chr             Int
    ord             Str
    chars           Str
    fmt             Str
    uc              Str
    lc              Str
    capitalize      Str
    fc              Str
    flip            Str
    trans           Str
    index           Str
    rindex          Str
    ords            Str
    split           Str
    match           Str
    comb            Str
    subst           Str
    sprintf         Str
    printf          Str
    samecase        Str
    trim            Str
    trim-leading    Str
    trim-trailing   Str
    EVAL            Str

=end table

=head1 Methods

=head2 method abs

    method abs()

Coerces the invocant to L<Numeric|/type/Numeric> and returns the absolute
value (that is, a non-negative number).

=head2 method conj

    method conj()

Coerces the invocant to L<Numeric|/type/Numeric> and returns the
L<complex|/type/Complex> conjugate (that is, the number with the sign of the
imaginary part negated).

=head2 method sqrt

    method sqrt()

Coerces the invocant to L<Numeric|/type/Numeric> and returns the square root,
that is, a non-negative number that, when multiplied with itself, produces the
original number.

=head2 method sign

    method sign()

Coerces the invocant to L<Numeric|/type/Real> and returns its sign, that
is, 0 if the number is 0, 1 for positive and -1 for negative values.

=head2 method rand

    method rand()

Coerces the invocant to L<Num|/type/Num> and returns a pseudo-random value
between zero and the number.

=head2 method sin

    method sin()

Coerces the invocant to L<Numeric|/type/Numeric>, interprets it as radians,
returns its L<sine|https://en.wikipedia.org/wiki/Sine>.

=head2 method asin

    method asin()

Coerces the invocant to L<Numeric|/type/Numeric>, and returns its
L<arc-sine|https://en.wikipedia.org/wiki/Inverse_trigonometric_functions> in
radians.

=head2 method cos

    method cos()

Coerces the invocant to L<Numeric|/type/Numeric>, interprets it as radians,
returns its L<sine|https://en.wikipedia.org/wiki/Cosine>.

=head2 method acos

    method acos()

Coerces the invocant to L<Numeric|/type/Numeric>, and returns its
L<arc-cosine|https://en.wikipedia.org/wiki/Inverse_trigonometric_functions> in
radians.

=head2 method tan

Coerces the invocant to L<Numeric|/type/Numeric>, interprets it as radians,
returns its L<tangens|https://en.wikipedia.org/wiki/Tangent>.

=head2 method atan

    method atan()

Coerces the invocant to L<Numeric|/type/Numeric>, and returns its
L<arc-tangens|https://en.wikipedia.org/wiki/Inverse_trigonometric_functions> in
radians.

=head2 method atan2

    method atan2($y = 1e0)

Coerces the invocant to L<Numeric|/type/Numeric>, and together with its
argument, returns its two-argument
L<arc-tangens|https://en.wikipedia.org/wiki/Inverse_trigonometric_functions> in
radians.

=head2 method sec

    method sec()

Coerces the invocant to L<Numeric|/type/Numeric>, interprets it as radians,
returns its L<secans|https://en.wikipedia.org/wiki/Trigonometric_functions#Reciprocal_functions>,
that is, the reciprocal of its cosine.

=head2 method asec

    method asec()

Coerces the invocant to L<Numeric|/type/Numeric>, and returns its
L<arc-secans|https://en.wikipedia.org/wiki/Inverse_trigonometric_functions> in
radians.

=head2 method cosec

    method cosec()

Coerces the invocant to L<Numeric|/type/Numeric>, interprets it as radians,
returns its L<cosecans|https://en.wikipedia.org/wiki/Trigonometric_functions#Reciprocal_functions>,
that is, the reciprocal of its sine.

=head2 method acosec

    method acosec()

Coerces the invocant to L<Numeric|/type/Numeric>, and returns its
L<arc-cosecans|https://en.wikipedia.org/wiki/Inverse_trigonometric_functions> in
radians.

=head2 method cotan

    method cotan()

Coerces the invocant to L<Numeric|/type/Numeric>, interprets it as radians,
returns its L<cotangens|https://en.wikipedia.org/wiki/Trigonometric_functions#Reciprocal_functions>,
that is, the reciprocal of its tangens.

=head2 method acotan

    method acotan()

Coerces the invocant to L<Numeric|/type/Numeric>, and returns its
L<arc-cotangens|https://en.wikipedia.org/wiki/Inverse_trigonometric_functions> in
radians.

=head2 method sinh

    method sinh()

Coerces the invocant to L<Numeric|/type/Numeric>, and returns its
L<Sine hyperbolicus|https://en.wikipedia.org/wiki/Hyperbolic_function>.

=head2 method asinh

    method asinh()

Coerces the invocant to L<Numeric|/type/Numeric>, and returns its
L<Inverse Sine hyperbolicus|https://en.wikipedia.org/wiki/Inverse_hyperbolic_function>.

=head2 method cosh

    method cosh()

Coerces the invocant to L<Numeric|/type/Numeric>, and returns its
L<Cosine hyperbolicus|https://en.wikipedia.org/wiki/Hyperbolic_function>.

=head2 method acosh

    method acosh()

Coerces the invocant to L<Numeric|/type/Numeric>, and returns its
L<Inverse Cosine hyperbolicus|https://en.wikipedia.org/wiki/Inverse_hyperbolic_function>.

=head2 method tanh

    method tanh()

Coerces the invocant to L<Numeric|/type/Numeric>, and returns its
L<Tangens hyperbolicus|https://en.wikipedia.org/wiki/Hyperbolic_function>.

=head2 method atanh

    method atanh()

Coerces the invocant to L<Numeric|/type/Numeric>, and returns its
L<Inverse tangens hyperbolicus|https://en.wikipedia.org/wiki/Inverse_hyperbolic_function>.

=head2 method log

    multi method log(Cool:D: Cool:D $base?)

Coerces the invocant to L<Numeric|/type/Numeric>, and returns its
L<Logarithm|https://en.wikipedia.org/wiki/Logarithm> to base C<$base>, or to
base C<e> (Euler's Number) if no base was supplied
(L<Natural logarithm|https://en.wikipedia.org/wiki/Natural_logarithm>.

=head2 method exp

    multi method exp(Cool:D: Cool:D $base?)

Coerces the invocant to L<Numeric|/type/Numeric>, and returns C<$base>
raised to the power of this number. If no C<$base> is supplied, C<e> (Euler's
Number) is used.

    say 0.exp;      # 1
    say 1.exp;      # 2.71828182845905
    say 10.exp;     # 22026.4657948067

=head2 method round

    multi method round(Cool:D: $unit = 1)

Coerces the invocant to L<Numeric|/type/Numeric>, and rounds it to the unit of
C<$unit>. If C<$unit> is 1, rounds to the nearest integer.

    say 1.7.round;          # 2
    say 1.07.round(0.1);    # 1.1
    say 21.round(10);       # 20

=head2 method floor

    multi method floor

Coerces the invocant to L<Numeric|/type/Numeric>, and rounds it downwards to
the nearest integer.

    say "1.99".floor;       # 1
    say "-1.9".floor;       # -2
    say 0.floor;            # 0

=head2 method ceiling

    multi method ceiling

Coerces the invocant to L<Numeric|/type/Numeric>, and rounds it upwards to
the nearest integer.

    say "1".ceiling;        # 1
    say "-0.9".ceiling;     # 0
    say "42.1".ceiling;     # 43


=head2 method ord

    method ord()

Coerces the invocant to L<Str|/type/Str>, and returns the
L<Unicode code point|https://en.wikipedia.org/wiki/Code_point>,
number of the code point.

    say 'a'.ord;            # 65

The inverse operation is L<chr|#method chr>.

=head2 method chr

    method chr()

Coerces the invocant to L<Int|/type/Int>, interprets it as a
L<Unicode code points|https://en.wikipedia.org/wiki/Code_point>,
and returns a L<string|/type/Str> made of that code point.

    say '65'.chr;       # A

The inverse operation is L<ord|#method ord>.

Mnemonic: turns an integer into a I<char>acter.

=head2 method chars

    method chars()

Coerces the invocant to L<Str|/type/Str>, and returns the number of
characters in the string. Characters should actually be grapheme clusters,
though current implementation errornously count codepoints instead.

    say 'm√∏p'.chars;    # 3

=head2 method codes

    method codes()

Coerces the invocant to L<Str|/type/Str>, and returns the number of
L<Unicode code points|https://en.wikipedia.org/wiki/Code_point>.

    say 'm√∏p'.codes;    # 3

=head2 method flip

    method flip()

Coerces the invocant to L<Str|/type/Str>, and returns a reversed version.

    say 421.flip;       # 124

=head2 method trim

    method trim()

Coerces the invocant to L<Str|/type/Str>, and returns the string with both
leading and trailing whitespace stripped.

    my $stripped = '  abc '.trim;
    say "<$stripped>";          # <abc>

=head2 method trim-leading

    method trim(-leading)

Coerces the invocant to L<Str|/type/Str>, and returns the string with
leading whitespace stripped.

    my $stripped = '  abc '.trim-leading;
    say "<$stripped>";          # <abc >

=head2 method trim-trailing

    method trim-trailing()

Coerces the invocant to L<Str|/type/Str>, and returns the string with both
leading and trailing whitespace stripped.

    my $stripped = '  abc '.trim-trailing;
    say "<$stripped>";          # <  abc>

=head2 method IO

    method IO() returns IO::Path:D

Coerces the invocant to L<IO::Path>.

    .say for '.'.IO.dir;        # gives a directory listing

=begin comment

TODO: sech, asech, cosech, acosech, cotanh, acotanh, cis, roots, log10,
unpolar, truncate, fmt, substr, substr-rw, uc, lc, tc,
tclc, wordcase, chomp, chop, chrs, trans, index, rindex, ords,
split, match, comb, lines, words, subst, sprintf, printf, samecase,
EVAL

=end comment

=end pod
