=begin pod

=TITLE role Supply

=SUBTITLE An asynchronous data stream with multiple subscribers

    role Supply is SuperClass { ... }

A supply is a thread-safe, asynchronous data stream like a
L<Channel|/type/Channel>, but it can have multiple subscribers
(I<taps>) that all get the same events.

It is central in supporting reactive programming in Perl 6.

C<Supply> is a role, but can be used directly too.

    my $s = Supply.new;

    # print even numbers directly
    $s.grep(* %% 2).tap(&say);

    $s.tap: -> $v { say "Got $v" },         # print everything
        closing => { say "finished!" },     # announce closing
        quit    => { say "finished with error." },
        ;

    $s.emit(23);
    $s.emit(42);

    $s.close;

Prints

    Got 23
    42
    Got 42
    finished!

There are two types of Supplies: C<live> and C<on demand>. When tapping into a
C<live> supply, the tap will only see values that are pumped B<after> the tap
has been created. Such supplies are normally infinite in nature, such as mouse
movements. Closing the tap does not stop events from occurring, it just means
nobody is listening. All tappers see the same stream.

A tap on an C<on demand> supply will initiate the production of values, and
tapping the supply again may result in a new set of values. For example,
C<Supply.interval> produces a fresh timer with the appropriate interval each
time it is tapped. If the tap is closed, the timer stops pushing out new
values.

C<Supply> as a punned class (that is, used directly as C<Supply.new>) is a
live supply, as are the supplies that are transformations of a live supply,
for example with C<$live.grep> or C<$live.map>.

The L<live method|#method live> returns C<True> on live supplies. Factory
methods such as L<interval|#method interval>, L<from-list|#method from-list>
tend to return I<on demand> supplies.

=head1 Methods

=head2 method tap

    method tap(Supply:D: &emit=-> $_ { },
            :&done,
            :&quit={ die $_ },
            :&closing,
        ) returns Tap:D

Creates a new subscription / tap, in addition to all existing taps. The first
positional argument is a piece of code that will be called when a new value
becomes available through the C<emit> call.

The C<&done> callback is called when the C<done> method on the supply is
called, indicating the end of life of the channel.

The C<&quit> callback is called when the C<quit> method on the supply is
called, indicating an erroneous termination of the supply.

The C<&closing> callback is called when somebody closes the tap (which
terminates that subscription, but keeps the supply as a whole in tact).

Method C<tap> returns an object of type L<Tap|/type/Tap>, on which you can
call the C<close> method to cancle the subscription.

    my $s = Supply.interval(1);
    my $t = $s.tap(-> $v { say $v }, done => { say "no more ticks" };
    sleep 5;
    $s.done;

Produces:

    0
    1
    2
    3
    4
    5
    no more ticks


=head2 method emit

    method emit(Supply:D: \msg)

Sends the C<msg> to all taps (that is, to all subscriptions).

    my $s = Supply.new;
    $s.tap(&say);
    $s.emit(42);    # triggers the &say from the previous line
    $s.done;

=head2 method done

    method done(Supply:D:)

Calls the C<done> callback on all taps that have one.

=head2 method quit

    method quit(Supply:D: $ex)

Calls the C<quit> callback on the taps that have one, passing the exception to
them.

This is meant for shutting down a supply with an error.

=head2 method taps

    method taps(Supply:D:) returns Int:D

Returns the number of taps.

    my $s = Supply.new;
    say $s.taps;    # 0
    $s.tap(&sqrt);
    say $s.taps;    # 1

=head2 method Channel

    method Channel(Supply:D:) returns Channel:D

Returns a L<Channel|/type/Channel> object that will receive all future values
from the supply, and will be C<close>d when the Supply is done, and quit (shut
down with error) when the supply is quit.

=head2 method Promise

    method Promise(Supply:D:) returns Promise:D

Returns a L<Promise|/type/Promise> object for the next value. That means the
promise is kept when there is a next value, and broken when the supply is done
or quit before a value arrived.

    my $s = Supply.new;
    my $p = $s.Promise;
    $p.then(-> $v { say "got $v.result()" });
    $s.emit('cha');         # got cha


=head2 method close

    method close(Supply:D: Tap:D $t)

Closes the given tap, this is, calls its C<close> callback (if any), and
prevents it from getting any more events.

=head2 method tappers

    method tappers(Supply:D:) returns List:D

Returns a list of taps as L<Tap|/type/Tap> objects.

=head2 method live

    method live(Supply:D:) returns Bool:D

Returns C<True> if the supply is "live", that is, events are emitted to taps
as soon as they arrive. Always returns C<True> in the default C<Supply> (but
for example on the supply returned from C<Supply.from-list> it's C<False>).

    say Supply.new.live;    # True

=head2 method wait

    method wait(Supply:D:)

Waits until the supply is done (in which case it returns C<True>) or C<quit>
(in which case it will throw the exception that was passed to C<quit>).

    my $s = Supply.new;
    $s.tap(&say);
    my $p = Promise.allof((^10).pick(*).map: -> $v {
        start {
            $s.emit($v)
        }
    });
    $p.then({ $s.done });

    $s.wait;
    say "Done";
    await $p;


=head2 method list

    method list(Supply:D:) returns List:D

Waits until the supply is done, and returns a list of all items emitted
since the C<list> call.

=head2 method interval

    method interval(Supply:U: $interval, $delay = 0)

Creates a new interval that fires an event every C<$interval> seconds,
starting C<$delay> seconds from the call. The event payload is an integer,
starting from 0 at the first event, and is increment by one for each event.

=head2 method grep

    method grep(Supply:D: Mu $test) returns Supply:D

Creates a new supply that only receives those events from the original supply
that smart-match against C<$test>.

    my $all  = Supply.new;
    my $ints = $all.grep(Int);
    $ints.tap(&say);
    $all.emit($_) for 1, 'a string', 3.14159;   # prints only 1

=head2 method map

    method map(Supply:D: &mapper)

Returns a new supply that receives the same elements as the original one, but
with the element transformed through C<&mapper>;

    my $all    = Supply.new;
    my $double = $all.map(-> $value { $value * 2 };
    $double.tap(&say);
    $all.emit(4);           # 8

=head2 method schedule-on

    method schedule-on(Supply:D: $scheduler)

Runs the emit, done and quit callbacks on the specified scheduler.

This is useful for GUI toolkits that require certain actions to be run from
the GUI thread.

=head2 method start

    method start(Supply:D: &startee)

Returns a supply of supplies. For each event in the original supply, the code
object is scheduled on another thread, and returns a supply either of a single
value (if the code succeeds), or one that quits without a value (if the code
fails).

This is useful for asynchronously starting work that you don't block on.

Use C<migrate> to join the values into a single Supply again.

=head2 method migrate

    method migrate(Supply:D:) returns Supply:D

Produces a continuous supply from a supply of supplies.

=head2 method delayed

    method delayed(Supply:D: $delay) returns Supply:D

Returns a supply thats delayed by C<$delay> seconds.

=head2 method from-list

    method from-list(Supply:U: *@elems) returns Supply:D

Creates an on-demand supply from the elements passed to this method.

    my $s = Supply.from-list(1, 2, 3);
    $s.tap(&say);           # 1\n2\n3\n
    $s.done;

=begin comment

TODO: methods on-demand, flat

=end comment

=end pod
