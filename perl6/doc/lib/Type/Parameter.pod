=begin pod

=TITLE class Parameter

=SUBTITLE Element of a L<Signature>

    class Parameter { }

Represents a parameter, for purpose of introspection.

The usual way to obtain a Parameter object is to create a signature,
and call C<.params> on it to obtain a list of the Parameters.

    my $sig   = :(Str $x);
    my $param = $sig.params[0];
    say $sig.type;              # Str()

See L<Signature> for more information, and also for an explanation
on what most of the concepts related to parameters mean.

=head1 Methods

=head2 method name

Returns the variable name.

=head2 method constraints

Returns additional constraints on the parameter (usually as an
C<all>-Junction).

=head2 method type

Returns the nominal type constraint of the parameter.

=head2 method named

Returns C<True> if it's a named parameter.

=head2 method named_names

Returns a list of names/aliases for this parameter.

=head2 method positional

Returns C<True> if the parameter is positional.

=head2 method slurpy

Returns C<True> for slurpy parameters.

=head2 method optional

Returns C<True> for optional parameters.

=head2 method parcel

Returns C<True> for parcel parameters.

    sub f(\$parcel) {
        $parcel = 5;
    }
    f(my $x);   # works
    f(42);      # dies in the assignment

Parcel parameters bind either a variable or a value passed to it, with
no decontainerization taking place.  That means that if a variable was passed
to it, you can assign to the parameter. This is different from
L<rw|#rw>-parameter which can only bind to variables, never to values.

=head2 method capture

Returns C<True> for parameters that capture the rest of the argument list into
a single object of L<type Capture|/type/Capture>.

    sub f(|capture) { }
    say &f.signature.params[0].capture;     # True

Capture parameters do not force any context on the values passed bound
to them, which is why they cannot have sigils.



=head2 method rw

Returns C<True> for C<is rw> parameters.

=head2 method copy

Returns C<True> for C<is copy> parameters.

=head2 method readonly

Returns C<True> for read-only parameters (the default).

=head2 method invocant

Returns C<True> if the parameter is the invocant parameter.

=head2 method default

Returns a closure that upon invocation returns the default value for
this parameter, or C<Any> if no default was provided.

=head2 method type_captures

Returns a list of variable names of type captures associated with this
parameter.

    sub a(::T ::U $x) { }
    say &a.signature.params[0].type_captures;   # T U

=end pod
