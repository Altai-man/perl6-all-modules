#| a Pkg represents a package installable via the system's package
#| manager, like `apt-get` or `yum`.
#|{
if not Pkg<curl> {
   .install;
   say "installed $_ {.version}";
}
}
class Pkg {
    my $updated = False;

    #| Installs the package via the builtin package manager.
    #| Returns true if the package was successfully installed.
    method ?install on {
        RHEL { ${yum install -y $self *>X} }
        Debian {
            unless ${apt-get install -y -q $self *>X} or $updated {
                # for now see if we can install and if not try an update and try again.
                # TODO: figure out a better way?
                $self.update-pkgs;
                ${apt-get install -y -q $self *>X};
            }
        }
        Alpine {
            $self.update-pkgs;
            ${ apk add $self -q --no-progress !>X };
        }
    }

    #| Returns True if a version of the package is installed.
    method ?installed on {
        Debian { ${dpkg -s $self *>X} }
        RHEL   { ${yum list installed $self *>X} }
        Alpine { ${apk info $self >X} }
    }

    #| Tells the system specific package manager to update its list of pacakges.
    method update-pkgs on {
        Debian {
            ${apt-get update *>X};
            $updated = True;
        }
        RHEL { ${yum check-update} }
        Alpine { ${apk update -q}  }
    }
    #| Gets the version of the currently installed package
    method ~version on {
        Debian { ${dpkg -s $self |sed -n 's/^Version: //p' } }
        RHEL   { ${yum info installed $self |sed -n 's/Version *: //p'} }
        Alpine { ${apk version $self | sed -rn '2s/\w+-(\S*).*/\1/p' } }
    }

    #| In Bool context Pkgs return `.installed`
    method Bool { $self.installed }

    method prompt-install {
        if prompt("This script requires the '$self' to be installed to continue.\ninstall?", :default) {
            $self.install;
        } else {
            die "unable to install $self";
        }
    }
}
