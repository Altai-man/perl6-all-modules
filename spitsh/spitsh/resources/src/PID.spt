sub kill($signal, PID *@pids) {
    ${kill "-$signal" @pids} if @pids;
}

sub wait(PID *@pids) {
    ${wait @pids}
}

#| The PID class represents an integer process ID.
augment PID {
    #| In Bool context the PID returns the result of `.exists`
    method Bool { $self.exists }
    #| Returns true if the process exists on the system.
    method ?exists on {
        Alpine { File("/proc/$self").exists }
        Any    { ${ps -p $self >X} }
    }
    #| Sends the process a signal. Returns true if the signal was successfully
    #| sent.
    method ?kill($signal) {
        ${kill "-$signal" $self};
    }

    method ?kill-group($signal){
        ${kill $signal "-$self"}
    }

    method children (-->List[PID]) {
        ${ps -o 'ppid,pid' | awk -v "p=$self" '$1==p{print $2}'}
    }

    method descendants(-->List[PID]) {
        $_, .descendants for $self.children;
    }

    method wait { wait $self }
}

augment List[PID] {
    method wait { wait @$self }
    method kill($signal) { kill $signal, @$self }
}
